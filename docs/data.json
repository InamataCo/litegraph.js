{
    "project": {},
    "files": {
        "../src/litegraph.js": {
            "name": "../src/litegraph.js",
            "modules": {},
            "classes": {
                "LiteGraph": 1,
                "LGraph": 1,
                "LGraphNode": 1,
                "LGraphCanvas": 1,
                "ContextMenu": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "LiteGraph": {
            "name": "LiteGraph",
            "shortname": "LiteGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegraph.js",
            "line": 7,
            "description": "The Global Scope. It contains all the registered node classes.",
            "is_constructor": 1
        },
        "LGraph": {
            "name": "LGraph",
            "shortname": "LGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegraph.js",
            "line": 761,
            "description": "LGraph is the class that contain a full graph. We instantiate one and add nodes to it, and then we can run the execution loop.\nsupported callbacks:\n\t\t+ onNodeAdded: when a new node is added to the graph\n\t\t+ onNodeRemoved: when a node inside this graph is removed\n\t\t+ onNodeConnectionChange: some connection has changed in the graph (connected or disconnected)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "o",
                    "description": "data from previous serialization [optional]",
                    "type": "Object"
                }
            ]
        },
        "LGraphNode": {
            "name": "LGraphNode",
            "shortname": "LGraphNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegraph.js",
            "line": 2404,
            "description": "Base Class for all the node type classes",
            "params": [
                {
                    "name": "name",
                    "description": "a name for the node",
                    "type": "String"
                }
            ]
        },
        "LGraphCanvas": {
            "name": "LGraphCanvas",
            "shortname": "LGraphCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegraph.js",
            "line": 5720,
            "description": "marks as dirty the canvas, this way it will be rendered again",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "the canvas where you want to render (it accepts a selector in string format or the canvas element itself)",
                    "type": "HTMLCanvas"
                },
                {
                    "name": "graph",
                    "description": "[optional]",
                    "type": "LGraph"
                },
                {
                    "name": "options",
                    "description": "[optional] { skip_rendering, autoresize, viewport }",
                    "type": "Object"
                }
            ],
            "itemtype": "method"
        },
        "ContextMenu": {
            "name": "ContextMenu",
            "shortname": "ContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegraph.js",
            "line": 13516,
            "description": "ContextMenu from LiteGUI",
            "is_constructor": 1,
            "params": [
                {
                    "name": "values",
                    "description": "(allows object { title: \"Nice text\", callback: function ... })",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "[optional] Some options:\\\n- title: title to show on top of the menu\n- callback: function to call when an option is clicked, it receives the item information\n- ignore_item_callbacks: ignores the callback inside the item, it just calls the options.callback\n- event: you can pass a MouseEvent, this way the ContextMenu appears in that position",
                    "type": "Object"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../src/litegraph.js",
            "line": 149,
            "description": "Register a node class so it can be listed when the user wants to create a new one",
            "itemtype": "method",
            "name": "registerNodeType",
            "params": [
                {
                    "name": "type",
                    "description": "name of the node and path",
                    "type": "String"
                },
                {
                    "name": "base_class",
                    "description": "class containing the structure of a node",
                    "type": "Class"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 254,
            "description": "removes a node type from the system",
            "itemtype": "method",
            "name": "unregisterNodeType",
            "params": [
                {
                    "name": "type",
                    "description": "name of the node or the node constructor itself",
                    "type": "String|Object"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 273,
            "description": "Save a slot type and his node",
            "itemtype": "method",
            "name": "registerSlotType",
            "params": [
                {
                    "name": "type",
                    "description": "name of the node or the node constructor itself",
                    "type": "String|Object"
                },
                {
                    "name": "slot_type",
                    "description": "name of the slot type (variable type), eg. string, number, array, boolean, ..",
                    "type": "String"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 328,
            "description": "Create a new nodetype by passing a function, it wraps it with a proper class and generates inputs according to the parameters of the function.\nUseful to wrap simple methods that do not require properties, and that only process some input to generate an output.",
            "itemtype": "method",
            "name": "wrapFunctionAsNode",
            "params": [
                {
                    "name": "name",
                    "description": "node name with namespace (p.e.: 'math/sum')",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "param_types",
                    "description": "[optional] an array containing the type of every parameter, otherwise parameters will accept any type",
                    "type": "Array"
                },
                {
                    "name": "return_type",
                    "description": "[optional] string with the return type, otherwise it will be generic",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "[optional] properties to be configurable",
                    "type": "Object"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 379,
            "description": "Removes all previously registered node's types",
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 389,
            "description": "Adds this method to all nodetypes, existing and to be created\n(You can add it to LGraphNode.prototype but then existing node types wont have it)",
            "itemtype": "method",
            "name": "addNodeMethod",
            "params": [
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 406,
            "description": "Create a node of a given type with a name. The node is not attached to any graph yet.",
            "itemtype": "method",
            "name": "createNode",
            "params": [
                {
                    "name": "type",
                    "description": "full name of the node class. p.e. \"math/sin\"",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "a name to distinguish from other nodes",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "to set options",
                    "type": "Object"
                }
            ],
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 482,
            "description": "Returns a registered node type with a given name",
            "itemtype": "method",
            "name": "getNodeType",
            "params": [
                {
                    "name": "type",
                    "description": "full name of the node class. p.e. \"math/sin\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node class",
                "type": "Class"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 492,
            "description": "Returns a list of node types matching one category",
            "itemtype": "method",
            "name": "getNodeType",
            "params": [
                {
                    "name": "category",
                    "description": "category name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array with all the node classes",
                "type": "Array"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 523,
            "description": "Returns a list with all the node type categories",
            "itemtype": "method",
            "name": "getNodeTypesCategories",
            "params": [
                {
                    "name": "filter",
                    "description": "only nodes with ctor.filter equal can be shown",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array with all the names of the categories",
                "type": "Array"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 615,
            "description": "Returns if the types of two slots are compatible (taking into account wildcards, etc)",
            "itemtype": "method",
            "name": "isValidConnection",
            "params": [
                {
                    "name": "type_a",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type_b",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if they can be connected",
                "type": "Boolean"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 660,
            "description": "Register a string in the search box so when the user types it it will recommend this node",
            "itemtype": "method",
            "name": "registerSearchboxExtra",
            "params": [
                {
                    "name": "node_type",
                    "description": "the node recommended",
                    "type": "String"
                },
                {
                    "name": "description",
                    "description": "text to show next to it",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "it could contain info of how the node should be configured",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if they can be connected",
                "type": "Boolean"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 676,
            "description": "Wrapper to load files (from url using fetch or from file using FileReader)",
            "itemtype": "method",
            "name": "fetchFile",
            "params": [
                {
                    "name": "url",
                    "description": "the url of the file (or the file itself)",
                    "type": "String|File|Blob"
                },
                {
                    "name": "type",
                    "description": "an string to know how to fetch it: \"text\",\"arraybuffer\",\"json\",\"blob\"",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback(data)",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "in case of an error",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "returns the object used to",
                "type": "FileReader|Promise"
            },
            "class": "LiteGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 798,
            "description": "Removes all nodes from this graph",
            "itemtype": "method",
            "name": "clear",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 867,
            "description": "Attach Canvas to this graph",
            "itemtype": "method",
            "name": "attachCanvas",
            "params": [
                {
                    "name": "graph_canvas",
                    "description": "",
                    "type": "GraphCanvas"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 889,
            "description": "Detach Canvas from this graph",
            "itemtype": "method",
            "name": "detachCanvas",
            "params": [
                {
                    "name": "graph_canvas",
                    "description": "",
                    "type": "GraphCanvas"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 907,
            "description": "Starts running this graph every interval milliseconds.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "interval",
                    "description": "amount of milliseconds between executions, if 0 then it renders to the monitor refresh rate",
                    "type": "Number"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 958,
            "description": "Stops the execution loop of the graph",
            "itemtype": "method",
            "name": "stop execution",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 984,
            "description": "Run N steps (cycles) of the graph",
            "itemtype": "method",
            "name": "runStep",
            "params": [
                {
                    "name": "num",
                    "description": "number of steps to run, default is 1",
                    "type": "Number"
                },
                {
                    "name": "do_not_catch_errors",
                    "description": "[optional] if you want to try/catch errors",
                    "type": "Boolean"
                },
                {
                    "name": "limit",
                    "description": "max number of nodes to execute (used to execute from start to a node)",
                    "type": "Number"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1075,
            "description": "Updates the graph execution order according to relevance of the nodes (nodes with only outputs have more relevance than\nnodes with only inputs.",
            "itemtype": "method",
            "name": "updateExecutionOrder",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1231,
            "description": "Returns all the nodes that could affect this one (ancestors) by crawling all the inputs recursively.\nIt doesn't include the node itself",
            "itemtype": "method",
            "name": "getAncestors",
            "return": {
                "description": "an array with all the LGraphNodes that affect this node, in order of execution",
                "type": "Array"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1266,
            "description": "Positions every node in a more readable manner",
            "itemtype": "method",
            "name": "arrange",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1310,
            "description": "Returns the amount of time the graph has been running in milliseconds",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "number of milliseconds the graph has been running",
                "type": "Number"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1319,
            "description": "Returns the amount of time accumulated using the fixedtime_lapse var. This is used in context where the time increments should be constant",
            "itemtype": "method",
            "name": "getFixedTime",
            "return": {
                "description": "number of milliseconds the graph has been running",
                "type": "Number"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1329,
            "description": "Returns the amount of time it took to compute the latest iteration. Take into account that this number could be not correct\nif the nodes are using graphical actions",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "number of milliseconds it took the last cycle",
                "type": "Number"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1340,
            "description": "Sends an event to all the nodes, useful to trigger stuff",
            "itemtype": "method",
            "name": "sendEventToAllNodes",
            "params": [
                {
                    "name": "eventname",
                    "description": "the name of the event (function to be called)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "parameters in array format",
                    "type": "Array"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1393,
            "description": "Adds a new node instance to this graph",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "node",
                    "description": "the instance of the node",
                    "type": "LGraphNode"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1472,
            "description": "Removes a node from the graph",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "node",
                    "description": "the instance of the node",
                    "type": "LGraphNode"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1565,
            "description": "Returns a node by its id.",
            "itemtype": "method",
            "name": "getNodeById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1578,
            "description": "Returns a list of nodes that matches a class",
            "itemtype": "method",
            "name": "findNodesByClass",
            "params": [
                {
                    "name": "classObject",
                    "description": "the class itself (not an string)",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "a list with all the nodes of this type",
                "type": "Array"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1595,
            "description": "Returns a list of nodes that matches a type",
            "itemtype": "method",
            "name": "findNodesByType",
            "params": [
                {
                    "name": "type",
                    "description": "the name of the node type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a list with all the nodes of this type",
                "type": "Array"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1613,
            "description": "Returns the first node that matches a name in its title",
            "itemtype": "method",
            "name": "findNodeByTitle",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the node to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null",
                "type": "Node"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1628,
            "description": "Returns a list of nodes that matches a name",
            "itemtype": "method",
            "name": "findNodesByTitle",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the node to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a list with all the nodes with this name",
                "type": "Array"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1644,
            "description": "Returns the top-most node in this position of the canvas",
            "itemtype": "method",
            "name": "getNodeOnPos",
            "params": [
                {
                    "name": "x",
                    "description": "the x coordinate in canvas space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coordinate in canvas space",
                    "type": "Number"
                },
                {
                    "name": "nodes_list",
                    "description": "a list with all the nodes to search from, by default is all the nodes in the graph",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the node at this position or null",
                "type": "LGraphNode"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1669,
            "description": "Returns the top-most group in that position",
            "itemtype": "method",
            "name": "getGroupOnPos",
            "params": [
                {
                    "name": "x",
                    "description": "the x coordinate in canvas space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y coordinate in canvas space",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the group or null",
                "type": "LGraphGroup"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1686,
            "description": "Checks that the node type matches the node type registered, used when replacing a nodetype by a newer version during execution\nthis replaces the ones using the old version with the new version",
            "itemtype": "method",
            "name": "checkNodeTypes",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1740,
            "description": "Tell this graph it has a global graph input of this type",
            "itemtype": "method",
            "name": "addGlobalInput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "[optional]",
                    "type": "*"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1768,
            "description": "Assign a data to the global graph input",
            "itemtype": "method",
            "name": "setGlobalInputData",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1782,
            "description": "Returns the current value of a global graph input",
            "itemtype": "method",
            "name": "getInputData",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the data",
                "type": "*"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1796,
            "description": "Changes the name of a global graph input",
            "itemtype": "method",
            "name": "renameInput",
            "params": [
                {
                    "name": "old_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1829,
            "description": "Changes the type of a global graph input",
            "itemtype": "method",
            "name": "changeInputType",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1855,
            "description": "Removes a global graph input",
            "itemtype": "method",
            "name": "removeInput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1879,
            "description": "Creates a global graph output",
            "itemtype": "method",
            "name": "addOutput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1899,
            "description": "Assign a data to the global output",
            "itemtype": "method",
            "name": "setOutputData",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1913,
            "description": "Returns the current value of a global graph output",
            "itemtype": "method",
            "name": "getOutputData",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the data",
                "type": "*"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1927,
            "description": "Renames a global graph output",
            "itemtype": "method",
            "name": "renameOutput",
            "params": [
                {
                    "name": "old_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1956,
            "description": "Changes the type of a global graph output",
            "itemtype": "method",
            "name": "changeOutputType",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 1982,
            "description": "Removes a global graph output",
            "itemtype": "method",
            "name": "removeOutput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2043,
            "description": "returns if the graph is in live mode",
            "itemtype": "method",
            "name": "isLive",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2062,
            "description": "clears the triggered slot animation in all links (stop visual animation)",
            "itemtype": "method",
            "name": "clearTriggeredSlots",
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2093,
            "description": "Destroys a link",
            "itemtype": "method",
            "name": "removeLink",
            "params": [
                {
                    "name": "link_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2110,
            "description": "Creates a Object containing all the info about this graph, it can be serialized",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "value of the node",
                "type": "Object"
            },
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2164,
            "description": "Configure a graph from a JSON string",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "str",
                    "description": "configure a graph from a JSON string",
                    "type": "String"
                },
                {
                    "name": "returns",
                    "description": "if there was any error parsing",
                    "type": "Boolean"
                }
            ],
            "class": "LGraph"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2457,
            "description": "configure a node from an object containing the serialized info",
            "itemtype": "method",
            "name": "configure",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2550,
            "description": "serialize the content",
            "itemtype": "method",
            "name": "serialize",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2667,
            "description": "serialize and stringify",
            "itemtype": "method",
            "name": "toString",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2677,
            "description": "get the title string",
            "itemtype": "method",
            "name": "getTitle",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2686,
            "description": "sets the value of a property",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2719,
            "description": "sets the output data",
            "itemtype": "method",
            "name": "setOutputData",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2757,
            "description": "sets the output data type, useful when you want to be able to overwrite the data type",
            "itemtype": "method",
            "name": "setOutputDataType",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2786,
            "description": "Retrieves the input data (data traveling through the connection) from one slot",
            "itemtype": "method",
            "name": "getInputData",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "force_update",
                    "description": "if set to true it will force the connected node of this slot to output data into this link",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "data or if it is not connected returns undefined",
                "type": "*"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2828,
            "description": "Retrieves the input data type (in case this supports multiple input types)",
            "itemtype": "method",
            "name": "getInputDataType",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "datatype in string format",
                "type": "String"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2859,
            "description": "Retrieves the input data from one slot using its name instead of slot number",
            "itemtype": "method",
            "name": "getInputDataByName",
            "params": [
                {
                    "name": "slot_name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "force_update",
                    "description": "if set to true it will force the connected node of this slot to output data into this link",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "data or if it is not connected returns null",
                "type": "*"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2877,
            "description": "tells you if there is a connection in one input slot",
            "itemtype": "method",
            "name": "isInputConnected",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2890,
            "description": "tells you info about an input connection (which node, type, etc)",
            "itemtype": "method",
            "name": "getInputInfo",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object or null { link: id, name: string, type: string or 0 }",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2906,
            "description": "Returns the link info in the connection of an input slot",
            "itemtype": "method",
            "name": "getInputLink",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object or null",
                "type": "LLink"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2923,
            "description": "returns the node connected in the input slot",
            "itemtype": "method",
            "name": "getInputNode",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "node or null",
                "type": "LGraphNode"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2947,
            "description": "returns the value of an input with this name, otherwise checks if there is a property with that name",
            "itemtype": "method",
            "name": "getInputOrProperty",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value",
                "type": "*"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2970,
            "description": "tells you the last output data that went in that slot",
            "itemtype": "method",
            "name": "getOutputData",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object or null",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 2988,
            "description": "tells you info about an output connection (which node, type, etc)",
            "itemtype": "method",
            "name": "getOutputInfo",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object or null { name: string, type: string, links: [ ids of links in number ] }",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3004,
            "description": "tells you if there is a connection in one output slot",
            "itemtype": "method",
            "name": "isOutputConnected",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3021,
            "description": "tells you if there is any connection in the output slots",
            "itemtype": "method",
            "name": "isAnyOutputConnected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3038,
            "description": "retrieves all the nodes connected to this output slot",
            "itemtype": "method",
            "name": "getOutputNodes",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3130,
            "description": "Triggers the node code execution, place a boolean/counter to mark the node as being executed",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "param",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3160,
            "description": "Triggers an action, wrapped by logics to control execution flow",
            "itemtype": "method",
            "name": "actionDo",
            "params": [
                {
                    "name": "action",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3189,
            "description": "Triggers an event in this node, this will trigger any output with the same name",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "name ( \"on_play\", ... ) if action is equivalent to false then the event is send to all",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3211,
            "description": "Triggers a slot event in this node: cycle output slots and launch execute/action on connected nodes",
            "itemtype": "method",
            "name": "triggerSlot",
            "params": [
                {
                    "name": "slot",
                    "description": "the index of the output slot",
                    "type": "Number"
                },
                {
                    "name": "param",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "link_id",
                    "description": "[optional] in case you want to trigger and specific output link in a slot",
                    "type": "Number"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3289,
            "description": "clears the trigger slot animation",
            "itemtype": "method",
            "name": "clearTriggeredSlot",
            "params": [
                {
                    "name": "slot",
                    "description": "the index of the output slot",
                    "type": "Number"
                },
                {
                    "name": "link_id",
                    "description": "[optional] in case you want to trigger and specific output link in a slot",
                    "type": "Number"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3326,
            "description": "changes node size and triggers callback",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Vec2"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3338,
            "description": "add a new property to this node",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "default_value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "string defining the output type (\"vec3\",\"number\",...)",
                    "type": "String"
                },
                {
                    "name": "extra_info",
                    "description": "this can be used to have special properties of the property (like values, etc)",
                    "type": "Object"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3371,
            "description": "add a new output slot to use in this node",
            "itemtype": "method",
            "name": "addOutput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "string defining the output type (\"vec3\",\"number\",...)",
                    "type": "String"
                },
                {
                    "name": "extra_info",
                    "description": "this can be used to have special properties of an output (label, special color, position, etc)",
                    "type": "Object"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3401,
            "description": "add a new output slot to use in this node",
            "itemtype": "method",
            "name": "addOutputs",
            "params": [
                {
                    "name": "array",
                    "description": "of triplets like [[name,type,extra_info],[...]]",
                    "type": "Array"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3432,
            "description": "remove an existing output slot",
            "itemtype": "method",
            "name": "removeOutput",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3461,
            "description": "add a new input slot to use in this node",
            "itemtype": "method",
            "name": "addInput",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "string defining the input type (\"vec3\",\"number\",...), it its a generic one use 0",
                    "type": "String"
                },
                {
                    "name": "extra_info",
                    "description": "this can be used to have special properties of an input (label, color, position, etc)",
                    "type": "Object"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3494,
            "description": "add several new input slots in this node",
            "itemtype": "method",
            "name": "addInputs",
            "params": [
                {
                    "name": "array",
                    "description": "of triplets like [[name,type,extra_info],[...]]",
                    "type": "Array"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3524,
            "description": "remove an existing input slot",
            "itemtype": "method",
            "name": "removeInput",
            "params": [
                {
                    "name": "slot",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3549,
            "description": "add an special connection to this node (used for special kinds of graphs)",
            "itemtype": "method",
            "name": "addConnection",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "string defining the input type (\"vec3\",\"number\",...)",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "position of the connection inside the node",
                    "type": "[x,y]"
                },
                {
                    "name": "direction",
                    "description": "if is input or output",
                    "type": "String"
                }
            ],
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3569,
            "description": "computes the minimum size of a node according to its inputs and output slots",
            "itemtype": "method",
            "name": "computeSize",
            "params": [
                {
                    "name": "minHeight",
                    "description": "",
                    "type": "Vec2"
                }
            ],
            "return": {
                "description": "the total size",
                "type": "Vec2"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3660,
            "description": "returns all the info available about a property of this node.",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "property",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the object with all the available info",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3703,
            "description": "Defines a widget inside the node, it will be rendered on top of the node, you can control lots of properties",
            "itemtype": "method",
            "name": "addWidget",
            "params": [
                {
                    "name": "type",
                    "description": "the widget type (could be \"number\",\"string\",\"combo\"",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the text to show on the widget",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the default value",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to call when it changes (optionally, it can be the name of the property to modify)",
                    "type": "Function|String"
                },
                {
                    "name": "options",
                    "description": "the object that contains special properties of this widget",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the created widget object",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3774,
            "description": "returns the bounding of the object, used for rendering purposes\nbounding is: [topleft_cornerx, topleft_cornery, width, height]",
            "itemtype": "method",
            "name": "getBounding",
            "return": {
                "description": "the total size",
                "type": "Float32Array[4]"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3793,
            "description": "checks if a point is inside the shape of a node",
            "itemtype": "method",
            "name": "isPointInside",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3833,
            "description": "checks if a point is inside a node slot, and returns info about which slot",
            "itemtype": "method",
            "name": "getSlotInPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if found the object contains { input|output: slot object, slot: number, link_pos: [x,y] }",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3884,
            "description": "returns the input slot with a given name (used for dynamic slots), -1 if not found",
            "itemtype": "method",
            "name": "findInputSlot",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the slot",
                    "type": "String"
                },
                {
                    "name": "returnObj",
                    "description": "if the obj itself wanted",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the slot (-1 if not found)",
                "type": "Number_or_object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3903,
            "description": "returns the output slot with a given name (used for dynamic slots), -1 if not found",
            "itemtype": "method",
            "name": "findOutputSlot",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the slot",
                    "type": "String"
                },
                {
                    "name": "returnObj",
                    "description": "if the obj itself wanted",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the slot (-1 if not found)",
                "type": "Number_or_object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3925,
            "description": "returns the first free input slot",
            "itemtype": "method",
            "name": "findInputSlotFree",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the slot (-1 if not found)",
                "type": "Number_or_object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3952,
            "description": "returns the first output slot free",
            "itemtype": "method",
            "name": "findOutputSlotFree",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the slot (-1 if not found)",
                "type": "Number_or_object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3979,
            "description": "findSlotByType for INPUTS",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3986,
            "description": "findSlotByType for OUTPUTS",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 3993,
            "description": "returns the output (or input) slot with a given type, -1 if not found",
            "itemtype": "method",
            "name": "findSlotByType",
            "params": [
                {
                    "name": "input",
                    "description": "uise inputs instead of outputs",
                    "type": "Boolean"
                },
                {
                    "name": "type",
                    "description": "the type of the slot",
                    "type": "String"
                },
                {
                    "name": "returnObj",
                    "description": "if the obj itself wanted",
                    "type": "Boolean"
                },
                {
                    "name": "preferFreeSlot",
                    "description": "if we want a free slot (if not found, will return the first of the type anyway)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the slot (-1 if not found)",
                "type": "Number_or_object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4052,
            "description": "connect this node output to the input of another node BY TYPE",
            "itemtype": "method",
            "name": "connectByType",
            "params": [
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                },
                {
                    "name": "node",
                    "description": "the target node",
                    "type": "LGraphNode"
                },
                {
                    "name": "target_type",
                    "description": "the input slot type of the target node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the link_info is created, otherwise null",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4105,
            "description": "connect this node input to the output of another node BY TYPE",
            "itemtype": "method",
            "name": "connectByType",
            "params": [
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                },
                {
                    "name": "node",
                    "description": "the target node",
                    "type": "LGraphNode"
                },
                {
                    "name": "target_type",
                    "description": "the output slot type of the target node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the link_info is created, otherwise null",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4160,
            "description": "connect this node output to the input of another node",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                },
                {
                    "name": "node",
                    "description": "the target node",
                    "type": "LGraphNode"
                },
                {
                    "name": "target_slot",
                    "description": "the input slot of the target node (could be the number of the slot or the string with the name of the slot, or -1 to connect a trigger)",
                    "type": "Number_or_string"
                }
            ],
            "return": {
                "description": "the link_info is created, otherwise null",
                "type": "Object"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4371,
            "description": "disconnect one output to an specific node",
            "itemtype": "method",
            "name": "disconnectOutput",
            "params": [
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                },
                {
                    "name": "target_node",
                    "description": "the target node to which this slot is connected [Optional, if not target_node is specified all nodes will be disconnected]",
                    "type": "LGraphNode"
                }
            ],
            "return": {
                "description": "if it was disconnected successfully",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4528,
            "description": "disconnect one input",
            "itemtype": "method",
            "name": "disconnectInput",
            "params": [
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                }
            ],
            "return": {
                "description": "if it was disconnected successfully",
                "type": "Boolean"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4621,
            "description": "returns the center of a connection point in canvas coords",
            "itemtype": "method",
            "name": "getConnectionPos",
            "params": [
                {
                    "name": "is_input",
                    "description": "true if if a input slot, false if it is an output",
                    "type": "Boolean"
                },
                {
                    "name": "slot",
                    "description": "(could be the number of the slot or the string with the name of the slot)",
                    "type": "Number_or_string"
                },
                {
                    "name": "out",
                    "description": "[optional] a place to store the output, to free garbage",
                    "type": "Vec2"
                }
            ],
            "return": {
                "description": "the position",
                "type": "[x,y]"
            },
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4827,
            "description": "Collapse the node to make it smaller on the canvas",
            "itemtype": "method",
            "name": "collapse",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 4844,
            "description": "Forces the node to do not move or realign on Z",
            "itemtype": "method",
            "name": "pin",
            "class": "LGraphNode"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5333,
            "description": "clears all the data inside",
            "itemtype": "method",
            "name": "clear",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5379,
            "description": "assigns a graph, you can reassign graphs to the same canvas",
            "itemtype": "method",
            "name": "setGraph",
            "params": [
                {
                    "name": "graph",
                    "description": "",
                    "type": "LGraph"
                }
            ],
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5408,
            "description": "returns the top level graph (in case there are subgraphs open on the canvas)",
            "itemtype": "method",
            "name": "getTopGraph",
            "return": {
                "description": "graph",
                "type": "LGraph"
            },
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5421,
            "description": "opens a graph contained inside a node in the current graph",
            "itemtype": "method",
            "name": "openSubgraph",
            "params": [
                {
                    "name": "graph",
                    "description": "",
                    "type": "LGraph"
                }
            ],
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5450,
            "description": "closes a subgraph contained inside a node",
            "itemtype": "method",
            "name": "closeSubgraph",
            "params": [
                {
                    "name": "assigns",
                    "description": "a graph",
                    "type": "LGraph"
                }
            ],
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5475,
            "description": "returns the visually active graph (in case there are more in the stack)",
            "itemtype": "method",
            "name": "getCurrentGraph",
            "return": {
                "description": "the active graph",
                "type": "LGraph"
            },
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5484,
            "description": "assigns a canvas",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "assigns",
                    "description": "a canvas (also accepts the ID of the element (not a selector)",
                    "type": "Canvas"
                }
            ],
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5571,
            "description": "binds mouse, keyboard, touch and drag events to the canvas",
            "itemtype": "method",
            "name": "bindEvents",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5636,
            "description": "unbinds mouse events from the canvas",
            "itemtype": "method",
            "name": "unbindEvents",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5694,
            "description": "this function allows to render the canvas using WebGL instead of Canvas2D\nthis is useful if you plant to render 3D objects inside your nodes, it uses litegl.js for webgl and canvas2DtoWebGL to emulate the Canvas2D calls in webGL",
            "itemtype": "method",
            "name": "enableWebGL",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5737,
            "description": "Used to attach the canvas in a popup",
            "itemtype": "method",
            "name": "getCanvasWindow",
            "return": {
                "description": "returns the window where the canvas is attached (the DOM root node)",
                "type": "Window"
            },
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5751,
            "description": "starts rendering the content of the canvas when needed",
            "itemtype": "method",
            "name": "startRendering",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 5776,
            "description": "stops rendering the content of the canvas (to save resources)",
            "itemtype": "method",
            "name": "stopRendering",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6103,
            "description": "Don't call the function if the block is already selected.\nOtherwise, it could cause the block to be unselected while its panel is open.",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6290,
            "description": "Called when a mouse move event has to be processed",
            "itemtype": "method",
            "name": "processMouseMove",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6547,
            "description": "Called when a mouse up event has to be processed",
            "itemtype": "method",
            "name": "processMouseUp",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6859,
            "description": "Called when a mouse wheel event has to be processed",
            "itemtype": "method",
            "name": "processMouseWheel",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6895,
            "description": "returns true if a position (in graph space) is on top of a node little corner box",
            "itemtype": "method",
            "name": "isOverNodeBox",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6916,
            "description": "returns the INDEX if a position (in graph space) is on top of a node input slot",
            "itemtype": "method",
            "name": "isOverNodeInput",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 6962,
            "description": "returns the INDEX if a position (in graph space) is on top of a node output slot",
            "itemtype": "method",
            "name": "isOverNodeOuput",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7008,
            "description": "process a key event",
            "itemtype": "method",
            "name": "processKey",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7235,
            "description": "process a item drop event on top the canvas",
            "itemtype": "method",
            "name": "processDrop",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7357,
            "description": "selects a given node (or adds it to the current selection)",
            "itemtype": "method",
            "name": "selectNode",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7372,
            "description": "selects several nodes (or adds them to the current selection)",
            "itemtype": "method",
            "name": "selectNodes",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7420,
            "description": "removes a node from the current selection",
            "itemtype": "method",
            "name": "deselectNode",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7455,
            "description": "removes all nodes from the current selection",
            "itemtype": "method",
            "name": "deselectAllNodes",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7485,
            "description": "deletes all nodes in the current selection from the graph",
            "itemtype": "method",
            "name": "deleteSelectedNodes",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7521,
            "description": "centers the camera on a given node",
            "itemtype": "method",
            "name": "centerOnNode",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7537,
            "description": "adds some useful properties to a mouse event, like the position in graph coordinates",
            "itemtype": "method",
            "name": "adjustMouseEvent",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7566,
            "description": "changes the zoom level of the graph (default is 1), you can pass also a place used to pivot the zoom",
            "itemtype": "method",
            "name": "setZoom",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7596,
            "description": "converts a coordinate from graph coordinates to canvas2D coordinates",
            "itemtype": "method",
            "name": "convertOffsetToCanvas",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7604,
            "description": "converts a coordinate from Canvas2D coordinates to graph space",
            "itemtype": "method",
            "name": "convertCanvasToOffset",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7621,
            "description": "brings a node to front (above all other nodes)",
            "itemtype": "method",
            "name": "bringToFront",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7635,
            "description": "sends a node to the back (below all other nodes)",
            "itemtype": "method",
            "name": "sendToBack",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7654,
            "description": "checks which nodes are visible (inside the camera area)",
            "itemtype": "method",
            "name": "computeVisibleNodes",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7679,
            "description": "renders the whole canvas content, by rendering in two separated canvas, one containing the background grid and the connections, and one containing the nodes)",
            "itemtype": "method",
            "name": "draw",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7716,
            "description": "draws the front canvas (the one containing all the nodes)",
            "itemtype": "method",
            "name": "drawFrontCanvas",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 7983,
            "description": "draws the panel in the corner that shows subgraph properties",
            "itemtype": "method",
            "name": "drawSubgraphPanel",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 8190,
            "description": "draws some useful stats in the corner of the canvas",
            "itemtype": "method",
            "name": "renderInfo",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 8216,
            "description": "draws the back canvas (the one containing the background and the connections)",
            "itemtype": "method",
            "name": "drawBackCanvas",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 8404,
            "description": "draws the given node inside the canvas",
            "itemtype": "method",
            "name": "drawNode",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 8893,
            "description": "draws the shape of the given node in the canvas",
            "itemtype": "method",
            "name": "drawNodeShape",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 9224,
            "description": "draws every connection visible in the canvas\nOPTIMIZE THIS: pre-catch connections position instead of recomputing them every time",
            "itemtype": "method",
            "name": "drawConnections",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 9350,
            "description": "draws a link between two points",
            "itemtype": "method",
            "name": "renderLink",
            "params": [
                {
                    "name": "a",
                    "description": "start pos",
                    "type": "Vec2"
                },
                {
                    "name": "b",
                    "description": "end pos",
                    "type": "Vec2"
                },
                {
                    "name": "link",
                    "description": "the link object with all the link info",
                    "type": "Object"
                },
                {
                    "name": "skip_border",
                    "description": "ignore the shadow of the link",
                    "type": "Boolean"
                },
                {
                    "name": "flow",
                    "description": "show flow animation (for events)",
                    "type": "Boolean"
                },
                {
                    "name": "color",
                    "description": "the color for the link",
                    "type": "String"
                },
                {
                    "name": "start_dir",
                    "description": "the direction enum",
                    "type": "Number"
                },
                {
                    "name": "end_dir",
                    "description": "the direction enum",
                    "type": "Number"
                },
                {
                    "name": "num_sublines",
                    "description": "number of sublines (useful to represent vec3 or rgb)",
                    "type": "Number"
                }
            ],
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 9728,
            "description": "draws the widgets stored inside a node",
            "itemtype": "method",
            "name": "drawNodeWidgets",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 9955,
            "description": "process an event on widgets",
            "itemtype": "method",
            "name": "processNodeWidgets",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10159,
            "description": "draws every group area in the background",
            "itemtype": "method",
            "name": "drawGroups",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10215,
            "description": "resizes the canvas to a given size, if no size is passed, then it tries to fill the parentNode",
            "itemtype": "method",
            "name": "resize",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10237,
            "description": "switches to live mode (node shapes are not rendered, only the content)\nthis feature was designed when graphs where meant to create user interfaces",
            "itemtype": "method",
            "name": "switchLiveMode",
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10347,
            "description": "Determines the furthest nodes in each direction",
            "params": [
                {
                    "name": "nodes",
                    "description": "the nodes to from which boundary nodes will be extracted",
                    "type": "LGraphNode[]"
                }
            ],
            "return": {
                "description": "}",
                "type": "Left: LGraphNode, top: LGraphNode, right: LGraphNode, bottom: LGraphNode"
            },
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10383,
            "description": "Determines the furthest nodes in each direction for the currently selected nodes",
            "return": {
                "description": "}",
                "type": "Left: LGraphNode, top: LGraphNode, right: LGraphNode, bottom: LGraphNode"
            },
            "class": "LGraphCanvas"
        },
        {
            "file": "../src/litegraph.js",
            "line": 10391,
            "params": [
                {
                    "name": "nodes",
                    "description": "a list of nodes",
                    "type": "LGraphNode[]"
                },
                {
                    "name": "direction",
                    "description": "Direction to align the nodes",
                    "type": "\"top\"|\"bottom\"|\"left\"|\"right\""
                },
                {
                    "name": "align_to",
                    "description": "Node to align to (if null, align to the furthest node in the given direction)",
                    "type": "LGraphNode?"
                }
            ],
            "class": "LGraphCanvas"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nRemoves all previously registered node's types",
            "line": " ../src/litegraph.js:379"
        },
        {
            "message": "Missing item type\nfindSlotByType for INPUTS",
            "line": " ../src/litegraph.js:3979"
        },
        {
            "message": "Missing item type\nfindSlotByType for OUTPUTS",
            "line": " ../src/litegraph.js:3986"
        },
        {
            "message": "Missing item type\nDon't call the function if the block is already selected.\nOtherwise, it could cause the block to be unselected while its panel is open.",
            "line": " ../src/litegraph.js:6103"
        },
        {
            "message": "Missing item type\nDetermines the furthest nodes in each direction",
            "line": " ../src/litegraph.js:10347"
        },
        {
            "message": "Missing item type\nDetermines the furthest nodes in each direction for the currently selected nodes",
            "line": " ../src/litegraph.js:10383"
        },
        {
            "message": "Missing item type",
            "line": " ../src/litegraph.js:10391"
        }
    ]
}